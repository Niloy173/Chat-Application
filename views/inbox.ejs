<%- include('./partials/header.ejs'); %>
    <div id="chat-container">
      <div id="search-container">
        <!-- <input type="text" placeholder="Search" /> -->
      </div>
      <div id="conversation-list">
        <% data.forEach(function(conversation) { %>
          <!-- conversation creator is same to logged in user, so we need to show participant name and avatar -->
          <% if(conversation.creator.id == loggedInUser.userid) { %>
            <div class="conversation" onclick="getAllMessages('<%= conversation._id %>',  '<%= conversation.participant.name %>')">
              <% if (conversation.participant.avatar) { %>
              <img title="<%= conversation.participant.name %>" src="./uploads/avatars/<%= conversation.participant.avatar %>" alt="<%= conversation.participant.name %>" />
              <% } else { %>
                <img  title="<%= conversation.participant.name %>" src="./images/nophoto.png" />
              <% } %>
              <div class="title-text"><%= conversation.participant.name %></div>
              <div class="conversation-date"><%= moment(conversation.last_updated).fromNow() %></div>
            </div>
          <% } else { %>
            <div class="conversation" onclick="getAllMessages('<%= conversation._id %>', '<%= conversation.creator.name %>')">
              <% if (conversation.creator.avatar) { %>
              <img  title="<%= conversation.creator.name %>" src="./uploads/avatars/<%= conversation.creator.avatar %>" alt="<%= conversation.creator.name %>" />
              <% } else { %>
                <img  title="<%= conversation.creator.name %>" src="./images/nophoto.png" />
              <% } %>
              <div class="title-text"><%= conversation.creator.name %></div>
              <div class="conversation-date"><%= moment(conversation.last_updated).fromNow() %></div>
            </div>
          <% } %>
        <% }); %>
        
        <!-- show no conversation placeholder image for 0 conversations -->
        <% if(data && data.length === 0) { %>
          <div class="nothing"><img src="./images/no-conversation.svg"></div>
        <% } %>
      </div>

      <div title="search for users" class="new-message-container" onclick="openModal()">
        <a href="#">+</a>
      </div>

      <div id="chat-title">
        <span id="conversation-partner"></span>
        <img title="Delete Conversation" onclick="DeleteCurrentConversation()"   src="./images/trash.png" alt="Delete Conversation" />
      </div>

      <!-- placeholder div if no messages are in messages area -->
      <div id="chat-message-list">
        <div class="nothing">select a conversation</div>
      </div>

      <!-- send message form -->
      <form id="chat-form" method="post" enctype="multipart/form-data">
        <label for="attachment"><img src="./images/attachment.png" alt="Add Attachment" /></label>
        <input type="file" multiple name="attachment" class="hide" id="attachment" />
        <input required  type="text" name="message" placeholder="Type a message or send message with attachment" autocomplete="off" />

      </form>

    </div>
    <%- include('./partials/addconversationmodel.ejs'); %>

    <script src="https://cdn.socket.io/4.5.0/socket.io.min.js" integrity="sha384-7EyYLQZgWBi67fBtVxw60/OWl1kjsfrPFcaU0pp0nAh+i8FD068QogUvg85Ewy1k" crossorigin="anonymous"></script>

    <script>

    const chat_container = document.querySelector("#chat-container");
    const form = document.querySelector("#chat-form");
    const messageContainer = document.querySelector("#chat-message-list");
    const chatTitleContainer = document.querySelector("#conversation-partner");
    const loggedinUserId = "<%= loggedInUser.userid%>";
    const loggedinUserName = "<%= loggedInUser.username %>";
    let participant = null;
    let current_conversation_id;
    let current_conversation_name;

       // socket initialization
        const socket = io('<%= process.env.APP_URL %>');


       

    // get message of a conversation
  async function getAllMessages(conversation_id,conversation_name)
    {


    
      // message failure Toast
      const messageFailureToast = Toastify(
        {
          text: "Error loading messages",
          duration : 2000,
        });

        

        let response = await fetch(`/inbox/messages/${conversation_id}`);
        let result = await response.json();

        // console.log(result.info);
        if(! result.errors && result.info)
        {
          form.style.visibility = 'visible';

          const {info, user, conversation_id} = result;

         
          console.log(info);
          participant = info.participant;
          current_conversation_id = conversation_id;
          current_conversation_name = conversation_name;

          if(info.messages)
          {
            let allMessages = ' ';
            // console.log(info.messages);

            if(info.messages.length > 0)
            {

              info.messages.forEach((message) => {

                let senderAvatar = message.sender.avatar ? `./uploads/avatars/${message.sender.avatar}` : './images/nophoto.png';
                  const messageClass = message.sender.id === loggedinUserId ? 'you-message' : 'other-message';
                  const showAvatar = message.sender.id === loggedinUserId ? '' : `<img class='otheruser' src="${senderAvatar}" alt="${message.sender.name}" />`;
                  // message attachments
                  let attachments = '<div class="attachments">';
                  if(message.attachment && message.attachment.length > 0) {
                    message.attachment.forEach(attachment => {
                      attachments += `<img class="attachment-img" src="./uploads/attachments/${attachment}" /> `;
                    });
                }

                attachments += '</div>';

                //final message html
                let messageHTML = `<div class="message-row ${messageClass}"><div class="message-content">
                      ${showAvatar}
                      <div class="message-text">${message.text}</div>
                      ${attachments}
                      <div class="message-time">${moment(message.date_time).fromNow()}</div>
                    </div></div>`;

                  allMessages += messageHTML;
                  messageContainer.innerHTML = allMessages;

                 
    
              });
            }else if(info.messages.length === 0) {
                messageContainer.innerHTML = '<div class="message-row"></div>';
              }

            chatTitleContainer.textContent = conversation_name;
          }

        }else{

          messageFailureToast.showToast();
        }
    }


    async function DeleteCurrentConversation()
    {

      const DeleteFailureToast = Toastify({
          text: "No message to Delete",
          duration: 1000,
        });
    
      // delete the selected conversation 
      let response = await fetch(`/inbox/delete/${current_conversation_id}`,{
        method: "POST"
      });

      let result = await response.json();
      
      if(!result.errors)
      {
       location.replace("/");
      }else{

        DeleteFailureToast.showToast();
        

      }
    }

    // handle new/live incoming message from socket
      socket.on("new_message", data => {
        
        // console.log(data.message.conversation_id);
        // console.log(current_conversation_id);
        // only respond if current conversation is open in any client
        if(data.message.conversation_id == current_conversation_id) {
          // message class
          const messageClass = data.message.sender.id === loggedinUserId ? 'you-message' : 'other-message';
          
          const senderAvatar = data.message.sender.avatar ? `<img src="./uploads/avatars/${data.message.sender.avatar}" alt="${data.message.sender.name}" />` : `<img src="./images/nophoto.png" alt="${data.message.sender.name}" />`;
          // message attachments
          let attachments = '<div class="attachments">';
          if(data.message.attachment && data.message.attachment.length > 0) {
            data.message.attachment.forEach(attachment => {
              attachments += `<img src="./uploads/attachments/${attachment}" /> `;
            });
          }
          attachments += '</div>';
          let messageHTML;
          // do not show avatar for loggedin user
          if(data.message.sender.id == loggedinUserId) {
            messageHTML = `<div class="message-row ${messageClass}"><div class="message-content">
              <div class="message-text">${data.message.message_}</div>
              ${attachments}
              <div class="message-time">${moment(data.message.date_time).fromNow()}</div>
            </div></div>`;
          } else {
            messageHTML = `<div class="message-row ${messageClass}"><div class="message-content">
              ${senderAvatar}
              <div class="message-text">${data.message.message_}</div>
              ${attachments}
              <div class="message-time">${moment(data.message.date_time).fromNow()}</div>
            </div></div>`;
          }
          // append the inoming message to message area as last item
          document.querySelector('#chat-message-list .message-row:first-child').insertAdjacentHTML('beforeBegin', messageHTML);
        }
      });

    form.onsubmit = async function (event) {
        event.preventDefault();
        const sendMessageFailureToast = Toastify({
          text: "Error sending message",
          duration: 1000,
        });
      //  prepare the form data
        const formData_ = new FormData(form);
        formData_.append('receiverId', participant.id);
        formData_.append('receiverName', participant.name);
        formData_.append('avatar', participant.avatar || ' ');
        formData_.append('conversationId', current_conversation_id);

        //send the request to server
       
       
        let response = await fetch("/inbox/message", {
          method: "POST",
          body: formData_,

        });
        // get response
        let result = await response.json();
        if (!result.errors) {
          form.reset(); // reset the form
          getAllMessages(current_conversation_id,current_conversation_name);
         
        } else {
          sendMessageFailureToast.showToast();
        }
      }
    
  </script>
    </body>
    </html>
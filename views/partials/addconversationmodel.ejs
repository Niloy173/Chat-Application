<div class="modal-wrapper"  id="add-conversation-modal">
  <div class="modal">
    <a onclick="closeModal()" href="#" class="modal-close">+</a>
    <div class="modal-title">
      <h2>Create New Conversation</h2>
    </div>
    <div class="modal-body">
      <form id="add-conversation-form">
        <input   autocomplete="off" name="user" id="user" type="text" placeholder="search user by name or email or mobile" />
        <p class="error"></p>
        <div class="search_users"></div>
        <input type="button" value="Submit" class="hide" />
      </form>
    </div>
  </div>
</div>

<script>

const modal = document.querySelector("#add-conversation-modal");

// typing detector
let typingTimer;
const doneTypingInterval = 500;
const input = document.querySelector("input#user");
const conversation_list = document.querySelector("#conversation-list");
let users_placeholder = document.querySelector(".search_users");


 // conversation created failure toast
 const conversationFailureToast = Toastify({
    text: "Error creating a conversation!",
    duration: 1000,
  });

function openModal()
{
  modal.style.display = "block";
}


function closeModal()
{
  modal.style.display = "none";
}

//  on keyup start the countDown
input.addEventListener("keyup",function() {

  clearTimeout(typingTimer);

  //reset
  users_placeholder.style.display = "none";

  if(input.value)
  {
    typingTimer = setTimeout(searchUsers,doneTypingInterval); // user has done typing
  }
});




// on keydown, clear the countdown
input.addEventListener("keydown",function() {
  clearTimeout(typingTimer);
});

// send request for search
async function searchUsers()
{
  let response = await fetch("/inbox/search",{
    method : "POST",
    body : JSON.stringify({
      user : input.value,
    }),
    headers:{
      "content-type" : "application/json; charset=UTF-8",
    },
  });

  let result = await response.json();

  // handle error and response
  if(result.errors)
  {
    const errorHandler = document.querySelector("p.error");
    errorHandler.textContent = result.errors.common.msg;
    errorHandler.style.display = "block";
  }else{

    if(result.length > 0){

      let generateHTML = "<ul>";
        result.forEach((user) => {

          const avatar = user.avatar ? "./uploads/avatars/"+user.avatar : "./images/nophoto.png";

          generateHTML += `<li onclick="createConversation('${user._id}', '${user.name}', '${user.avatar}')">
            <div class="user">
              <div class="avatar">
                <img src="${avatar}" />
                </div>
                <div style="color : #f2f2f2; font-size: 1.5rem; margin : 10px 0;" class="username">${user.name}</div>
                </div>
                </li>`;
        });

        generateHTML += "</ul>";
        users_placeholder.innerHTML =generateHTML;
        users_placeholder.style.display = "block";
    }
  }
}


 async function createConversation(p_id,name,avatar)
{

  // console.log(p_id);
  // console.log(name)
  // console.log(avatar);
  try {

    const response = await fetch("/inbox/conversation",{
      method : "POST",
      body : JSON.stringify({

        participant : name,
        id : p_id,
        avatar : avatar != "undefined"? avatar : null,
      }),

      headers : {

        "content-type": "application/json; charset=UTF-8",
      }
    });

    const result = await response.json();

    if(! result.errors)
    {
      users_placeholder.style.display = "none";
      input.value = name;

      setTimeout(() => {
        location.reload(1);
      },1000);
    }else{
      throw new Error(result.errors.common.msg);
    }
    
  } catch (error) {

    conversationFailureToast.showToast();
  }

}

</script>